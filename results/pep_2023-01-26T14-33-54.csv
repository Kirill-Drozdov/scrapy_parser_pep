number,name,status
PEP 387,Backwards Compatibility Policy,PEP 387
PEP 1,PEP Purpose and Guidelines,PEP 1
PEP 12,Sample reStructuredText PEP Template,PEP 12
PEP 581,Using GitHub Issues for CPython,PEP 581
PEP 20,The Zen of Python,PEP 20
PEP 247,API for Cryptographic Hash Functions,PEP 247
PEP 676,PEP Infrastructure Process,PEP 676
PEP 13,Python Language Governance,PEP 13
PEP 609,Python Packaging Authority (PyPA) Governance,PEP 609
PEP 101,Doing Python Releases 101,PEP 101
PEP 6,Bug Fix Releases,PEP 6
PEP 7,Style Guide for C Code,PEP 7
PEP 10,Voting Guidelines,PEP 10
PEP 11,CPython platform support,PEP 11
PEP 5,Guidelines for Language Evolution,PEP 5
PEP 8,Style Guide for Python Code,PEP 8
PEP 8015,Organization of the Python community,PEP 8015
PEP 8014,The Commons Governance Model,PEP 8014
PEP 8013,The External Council Governance Model,PEP 8013
PEP 8011,Python Governance Model Lead by Trio of Pythonistas,PEP 8011
PEP 3152,Cofunctions,PEP 3152
PEP 8010,The Technical Leader Governance Model,PEP 8010
PEP 8012,The Community Governance Model,PEP 8012
PEP 3145,Asynchronous I/O For subprocess.Popen,PEP 3145
PEP 3146,Merging Unladen Swallow into CPython,PEP 3146
PEP 3153,Asynchronous IO support,PEP 3153
PEP 3136,Labeled break and continue,PEP 3136
PEP 3139,Cleaning out sys and the “interpreter” module,PEP 3139
PEP 3140,"str(container) should call str(item), not repr(item)",PEP 3140
PEP 3142,Add a “while” clause to generator expressions,PEP 3142
PEP 3130,Access to Current Module/Class/Function,PEP 3130
PEP 3133,Introducing Roles,PEP 3133
PEP 3128,BList: A Faster List-like Type,PEP 3128
PEP 3126,Remove Implicit String Concatenation,PEP 3126
PEP 3122,Delineation of the main module,PEP 3122
PEP 3125,Remove Backslash Continuation,PEP 3125
PEP 3001,Procedure for reviewing and improving standard library modules,PEP 3001
PEP 3103,A Switch/Case Statement,PEP 3103
PEP 3117,Postfix type declarations,PEP 3117
PEP 754,IEEE 754 Floating Point Special Values,PEP 754
PEP 666,Reject Foolish Indentation,PEP 666
PEP 665,A file format to list Python dependencies for reproducibility of an application,PEP 665
PEP 677,Callable Type Syntax,PEP 677
PEP 690,Lazy Imports,PEP 690
PEP 650,Specifying Installer Requirements for Python Projects,PEP 650
PEP 651,Robust Stack Overflow Handling,PEP 651
PEP 663,"Standardizing Enum str(), repr(), and format() behaviors",PEP 663
PEP 662,Editable installs via virtual wheels,PEP 662
PEP 645,Allow writing optional types as,PEP 645
PEP 648,Extensible customizations of the interpreter at startup,PEP 648
PEP 640,Unused variable syntax,PEP 640
PEP 641,Using an underscore in the version portion of Python 3.10 compatibility tags,PEP 641
PEP 642,Explicit Pattern Syntax for Structural Pattern Matching,PEP 642
PEP 637,Support for indexing with keyword arguments,PEP 637
PEP 631,Dependency specification in pyproject.toml based on PEP 508,PEP 631
PEP 608,Coordinated Python release,PEP 608
PEP 611,The one million limit,PEP 611
PEP 633,Dependency specification in pyproject.toml using an exploded TOML table,PEP 633
PEP 620,Hide implementation details from the C API,PEP 620
PEP 622,Structural Pattern Matching,PEP 622
PEP 601,Forbid return/break/continue breaking out of finally,PEP 601
PEP 606,Python Compatibility Version,PEP 606
PEP 599,The manylinux2014 Platform Tag,PEP 599
PEP 605,A rolling feature release stream for CPython,PEP 605
PEP 598,Introducing incremental feature releases,PEP 598
PEP 595,Improving bugs.python.org,PEP 595
PEP 577,Augmented Assignment Expressions,PEP 577
PEP 580,The C call protocol,PEP 580
PEP 575,Unifying function/method classes,PEP 575
PEP 583,A Concurrency Memory Model for Python,PEP 583
PEP 576,Rationalize Built-in function classes,PEP 576
PEP 555,Context-local variables (contextvars),PEP 555
PEP 571,The manylinux2010 Platform Tag,PEP 571
PEP 559,Built-in noop(),PEP 559
PEP 549,Instance Descriptors,PEP 549
PEP 550,Execution Context,PEP 550
PEP 551,Security transparency in the Python runtime,PEP 551
PEP 546,Backport ssl.MemoryBIO and ssl.SSLObject to Python 2.7,PEP 546
PEP 548,More Flexible Loop Control,PEP 548
PEP 543,A Unified TLS API for Python,PEP 543
PEP 531,Existence checking operators,PEP 531
PEP 542,Dot Notation Assignment In Function Header,PEP 542
PEP 521,Managing global context via ‘with’ blocks in generators and coroutines,PEP 521
PEP 511,API for code transformers,PEP 511
PEP 513,A Platform Tag for Portable Linux Built Distributions,PEP 513
PEP 516,Build system abstraction for pip/conda etc,PEP 516
PEP 522,Allow BlockingIOError in security sensitive APIs,PEP 522
PEP 509,Add a private version to dict,PEP 509
PEP 500,A protocol for delegating datetime methods to their tzinfo implementations,PEP 500
PEP 502,String Interpolation - Extended Discussion,PEP 502
PEP 504,Using the System RNG by default,PEP 504
PEP 507,Migrate CPython to Git and GitLab,PEP 507
PEP 510,Specialize functions with guards,PEP 510
PEP 497,A standard mechanism for backward compatibility,PEP 497
PEP 490,Chain exceptions at C level,PEP 490
PEP 496,Environment Markers,PEP 496
PEP 474,Creating forge.python.org,PEP 474
PEP 481,"Migrate CPython to Git, Github, and Phabricator",PEP 481
PEP 455,Adding a key-transforming dictionary to collections,PEP 455
PEP 459,Standard Metadata Extensions for Python Software Packages,PEP 459
PEP 472,Support for indexing with keyword arguments,PEP 472
PEP 437,"A DSL for specifying signatures, annotations and argument converters",PEP 437
PEP 433,Easier suppression of file descriptor inheritance,PEP 433
PEP 432,Restructuring the CPython startup sequence,PEP 432
PEP 473,Adding structured data to built-in exceptions,PEP 473
PEP 439,Inclusion of implicit pip bootstrap in Python installation,PEP 439
PEP 431,Time zone support improvements,PEP 431
PEP 463,Exception-catching expressions,PEP 463
PEP 460,Add binary interpolation and formatting,PEP 460
PEP 462,Core development workflow automation for CPython,PEP 462
PEP 422,Simpler customisation of class creation,PEP 422
PEP 469,Migration of dict iteration code to Python 3,PEP 469
PEP 426,Metadata for Python Software Packages 2.0,PEP 426
PEP 408,Standard library __preview__ package,PEP 408
PEP 396,Module Version Numbers,PEP 396
PEP 410,Use decimal.Decimal type for timestamps,PEP 410
PEP 413,Faster evolution of the Python Standard Library,PEP 413
PEP 402,Simplified Package Layout and Partitioning,PEP 402
PEP 401,BDFL Retirement,PEP 401
PEP 416,Add a frozendict builtin type,PEP 416
PEP 406,Improved Encapsulation of Import State,PEP 406
PEP 395,Qualified Names for Modules,PEP 395
PEP 390,Static metadata for Distutils,PEP 390
PEP 382,Namespace Packages,PEP 382
PEP 411,Provisional packages in the Python standard library,PEP 411
PEP 386,Changing the version comparison module in Distutils,PEP 386
PEP 377,Allow __enter__() methods to skip the statement body,PEP 377
PEP 369,Post import hooks,PEP 369
PEP 379,Adding an Assignment Expression,PEP 379
PEP 381,Mirroring infrastructure for PyPI,PEP 381
PEP 365,Adding the pkg_resources module,PEP 365
PEP 367,New Super,PEP 367
PEP 354,Enumerations in Python,PEP 354
PEP 364,Transitioning to the Py3K Standard Library,PEP 364
PEP 363,Syntax For Dynamic Attribute Access,PEP 363
PEP 355,Path - Object oriented filesystem paths,PEP 355
PEP 359,The “make” Statement,PEP 359
PEP 350,Codetags,PEP 350
PEP 351,The freeze protocol,PEP 351
PEP 348,Exception Reorganization for Python 3.0,PEP 348
PEP 346,User Defined (”,PEP 346
PEP 345,Metadata for Python Software Packages 1.2,PEP 345
PEP 349,Allow str() to return unicode strings,PEP 349
PEP 344,Exception Chaining and Embedded Tracebacks,PEP 344
PEP 340,Anonymous Block Statements,PEP 340
PEP 339,Design of the CPython Compiler,PEP 339
PEP 336,Make None Callable,PEP 336
PEP 334,Simple Coroutines via SuspendIteration,PEP 334
PEP 335,Overloadable Boolean Operators,PEP 335
PEP 332,Byte vectors and String/Unicode Unification,PEP 332
PEP 330,Python Bytecode Verification,PEP 330
PEP 329,Treating Builtins as Constants in the Standard Library,PEP 329
PEP 326,A Case for Top and Bottom Values,PEP 326
PEP 325,Resource-Release Support for Generators,PEP 325
PEP 319,Python Synchronize/Asynchronize Block,PEP 319
PEP 321,Date/Time Parsing and Formatting,PEP 321
PEP 317,Eliminate Implicit Exception Instantiation,PEP 317
PEP 315,Enhanced While Loop,PEP 315
PEP 314,Metadata for Python Software Packages 1.1,PEP 314
PEP 313,Adding Roman Numeral Literals to Python,PEP 313
PEP 306,How to Change Python’s Grammar,PEP 306
PEP 310,Reliable Acquisition/Release Pairs,PEP 310
PEP 304,Controlling Generation of Bytecode Files,PEP 304
PEP 303,Extend divmod() for Multiple Divisors,PEP 303
PEP 299,Special __main__() function in modules,PEP 299
PEP 298,The Locked Buffer Interface,PEP 298
PEP 297,Support for System Upgrades,PEP 297
PEP 296,Adding a bytes Object Type,PEP 296
PEP 295,Interpretation of multiline string constants,PEP 295
PEP 294,Type Names in the types Module,PEP 294
PEP 284,Integer for-loops,PEP 284
PEP 288,Generators Attributes and Exceptions,PEP 288
PEP 276,Simple Iterator for ints,PEP 276
PEP 281,Loop Counter Iteration with range and xrange,PEP 281
PEP 275,Switching on Multiple Values,PEP 275
PEP 268,Extended HTTP functionality and WebDAV,PEP 268
PEP 270,uniq method for list objects,PEP 270
PEP 266,Optimizing Global Variable/Attribute Access,PEP 266
PEP 271,Prefixing sys.path by command line option,PEP 271
PEP 262,A Database of Installed Python Packages,PEP 262
PEP 259,Omit printing newline after newline,PEP 259
PEP 265,Sorting Dictionaries by Value,PEP 265
PEP 258,Docutils Design Specification,PEP 258
PEP 256,Docstring Processing System Framework,PEP 256
PEP 254,Making Classes Look More Like Types,PEP 254
PEP 245,Python Interface Syntax,PEP 245
PEP 244,The,PEP 244
PEP 246,Object Adaptation,PEP 246
PEP 242,Numeric Kinds,PEP 242
PEP 241,Metadata for Python Software Packages,PEP 241
PEP 243,Module Repository Upload Mechanism,PEP 243
PEP 240,Adding a Rational Literal to Python,PEP 240
PEP 231,__findattr__(),PEP 231
PEP 228,Reworking Python’s Numeric Model,PEP 228
PEP 239,Adding a Rational Type to Python,PEP 239
PEP 216,Docstring Format,PEP 216
PEP 224,Attribute Docstrings,PEP 224
PEP 215,String Interpolation,PEP 215
PEP 220,"Coroutines, Generators, Continuations",PEP 220
PEP 212,Loop Counter Iteration,PEP 212
PEP 210,Decoupling the Interpreter Loop,PEP 210
PEP 225,Elementwise/Objectwise Operators,PEP 225
PEP 211,Adding A New Outer Product Operator,PEP 211
PEP 209,Multi-dimensional Arrays,PEP 209
PEP 206,Python Advanced Library,PEP 206
PEP 204,Range Literals,PEP 204
PEP 102,Doing Python Micro Releases,PEP 102
PEP 103,Collecting information about git,PEP 103
PEP 42,Feature Requests,PEP 42
PEP 9,Sample Plaintext PEP Template,PEP 9
PEP 3,Guidelines for Handling Bug Reports,PEP 3
PEP 568,Generator-sensitivity for Context Variables,PEP 568
PEP 674,Disallow using macros as l-values,PEP 674
PEP 3150,Statement local namespaces (aka “given” clause),PEP 3150
PEP 3143,Standard daemon process library,PEP 3143
PEP 3124,"Overloading, Generic Functions, Interfaces, and Adaptation",PEP 3124
PEP 556,Threaded garbage collection,PEP 556
PEP 547,Running extension modules using the -m option,PEP 547
PEP 536,Final Grammar for Literal String Interpolation,PEP 536
PEP 535,Rich comparison chaining,PEP 535
PEP 533,Deterministic cleanup for iterators,PEP 533
PEP 534,Improved Errors for Missing Standard Library Modules,PEP 534
PEP 532,A circuit breaking protocol and binary operators,PEP 532
PEP 501,General purpose string interpolation,PEP 501
PEP 505,None-aware operators,PEP 505
PEP 499,,PEP 499
PEP 491,The Wheel Binary Package Format 1.9,PEP 491
PEP 447,Add __getdescriptor__ method to metaclass,PEP 447
PEP 444,Python Web3 Interface,PEP 444
PEP 419,Protecting cleanup statements from interruptions,PEP 419
PEP 423,Naming conventions and recipes related to packaging,PEP 423
PEP 403,General purpose decorator clause (aka “@in” clause),PEP 403
PEP 407,New release cycle and introducing long-term support versions,PEP 407
PEP 400,Deprecate codecs.StreamReader and codecs.StreamWriter,PEP 400
PEP 337,Logging Usage in the Standard Library,PEP 337
PEP 368,Standard image protocol and class,PEP 368
PEP 316,Programming by Contract for Python,PEP 316
PEP 323,Copyable Iterators,PEP 323
PEP 312,Simple Implicit Lambda,PEP 312
PEP 286,Enhanced Argument Tuples,PEP 286
PEP 269,Pgen Module for Python,PEP 269
PEP 267,Optimized Access to Module Namespaces,PEP 267
PEP 280,Optimizing access to globals,PEP 280
PEP 3100,Miscellaneous Python 3.0 Plans,PEP 3100
PEP 233,Python Online Help,PEP 233
PEP 222,Web Library Enhancements,PEP 222
PEP 219,Stackless Python,PEP 219
PEP 8001,Python Governance Voting Process,PEP 8001
PEP 3002,Procedure for Backwards-Incompatible Changes,PEP 3002
PEP 3003,Python Language Moratorium,PEP 3003
PEP 213,Attribute Access Handlers,PEP 213
PEP 3099,Things that will Not Change in Python 3000,PEP 3099
PEP 3000,Python 3000,PEP 3000
PEP 545,Python Documentation Translations,PEP 545
PEP 541,Package Index Name Retention,PEP 541
PEP 527,Removing Un(der)used file types/extensions on PyPI,PEP 527
PEP 512,Migrating from hg.python.org to GitHub,PEP 512
PEP 494,Python 3.6 Release Schedule,PEP 494
PEP 478,Python 3.5 Release Schedule,PEP 478
PEP 438,Transitioning to release-file hosting on PyPI,PEP 438
PEP 449,Removal of the PyPI Mirror Auto Discovery and Naming Scheme,PEP 449
PEP 429,Python 3.4 Release Schedule,PEP 429
PEP 464,Removal of the PyPI Mirror Authenticity API,PEP 464
PEP 470,Removing External Hosting Support on PyPI,PEP 470
PEP 375,Python 3.1 Release Schedule,PEP 375
PEP 385,Migrating from Subversion to Mercurial,PEP 385
PEP 392,Python 3.2 Release Schedule,PEP 392
PEP 398,Python 3.3 Release Schedule,PEP 398
PEP 373,Python 2.7 Release Schedule,PEP 373
PEP 374,Choosing a distributed VCS for the Python project,PEP 374
PEP 360,Externally Maintained Packages,PEP 360
PEP 361,Python 2.6 and 3.0 Release Schedule,PEP 361
PEP 356,Python 2.5 Release Schedule,PEP 356
PEP 347,Migrating the Python CVS to Subversion,PEP 347
PEP 283,Python 2.3 Release Schedule,PEP 283
PEP 320,Python 2.4 Release Schedule,PEP 320
PEP 251,Python 2.2 Release Schedule,PEP 251
PEP 200,Python 2.0 Release Schedule,PEP 200
PEP 160,Python 1.6 Release Schedule,PEP 160
PEP 226,Python 2.1 Release Schedule,PEP 226
PEP 3156,Asynchronous IO Support Rebooted: the “asyncio” Module,PEP 3156
PEP 3155,Qualified name for classes and functions,PEP 3155
PEP 3149,ABI version tagged .so files,PEP 3149
PEP 3151,Reworking the OS and IO exception hierarchy,PEP 3151
PEP 3154,Pickle protocol version 4,PEP 3154
PEP 3148,futures - execute computations asynchronously,PEP 3148
PEP 3147,PYC Repository Directories,PEP 3147
PEP 3144,IP Address Manipulation Library for the Python Standard Library,PEP 3144
PEP 3138,String representation in Python 3000,PEP 3138
PEP 3141,A Type Hierarchy for Numbers,PEP 3141
PEP 3137,Immutable Bytes and Mutable Buffer,PEP 3137
PEP 3135,New Super,PEP 3135
PEP 3132,Extended Iterable Unpacking,PEP 3132
PEP 3134,Exception Chaining and Embedded Tracebacks,PEP 3134
PEP 3131,Supporting Non-ASCII Identifiers,PEP 3131
PEP 3127,Integer Literal Support and Syntax,PEP 3127
PEP 3120,Using UTF-8 as the default source encoding,PEP 3120
PEP 3129,Class Decorators,PEP 3129
PEP 3119,Introducing Abstract Base Classes,PEP 3119
PEP 3115,Metaclasses in Python 3000,PEP 3115
PEP 3116,New I/O,PEP 3116
PEP 3118,Revising the buffer protocol,PEP 3118
PEP 3123,Making PyObject_HEAD conform to standard C,PEP 3123
PEP 3111,Simple input built-in in Python 3000,PEP 3111
PEP 3112,Bytes literals in Python 3000,PEP 3112
PEP 3114,Renaming iterator.next() to iterator.__next__(),PEP 3114
PEP 3113,Removal of Tuple Parameter Unpacking,PEP 3113
PEP 3110,Catching Exceptions in Python 3000,PEP 3110
PEP 3109,Raising Exceptions in Python 3000,PEP 3109
PEP 3108,Standard Library Reorganization,PEP 3108
PEP 3107,Function Annotations,PEP 3107
PEP 3105,Make print a function,PEP 3105
PEP 3101,Advanced String Formatting,PEP 3101
PEP 3106,"Revamping dict.keys(), .values() and .items()",PEP 3106
PEP 3102,Keyword-Only Arguments,PEP 3102
PEP 3104,Access to Names in Outer Scopes,PEP 3104
PEP 682,Format Specifier for Signed Zero,PEP 682
PEP 657,Include Fine Grained Error Locations in Tracebacks,PEP 657
PEP 660,Editable installs for pyproject.toml based builds (wheel based),PEP 660
PEP 670,Convert macros to functions in the Python C API,PEP 670
PEP 656,Platform Tag for Linux Distributions Using Musl,PEP 656
PEP 652,Maintaining the Stable ABI,PEP 652
PEP 629,Versioning PyPI’s Simple API,PEP 629
PEP 644,Require OpenSSL 1.1.1 or newer,PEP 644
PEP 643,Metadata for Package Source Distributions,PEP 643
PEP 627,Recording installed projects,PEP 627
PEP 628,Add,PEP 628
PEP 626,Precise line numbers for debugging and other tools.,PEP 626
PEP 623,Remove wstr from Unicode,PEP 623
PEP 618,Add Optional Length-Checking To zip,PEP 618
PEP 624,Remove Py_UNICODE encoder APIs,PEP 624
PEP 621,Storing project metadata in pyproject.toml,PEP 621
PEP 616,String methods to remove prefixes and suffixes,PEP 616
PEP 614,Relaxing Grammar Restrictions On Decorators,PEP 614
PEP 600,Future ‘manylinux’ Platform Tags for Portable Linux Built Distributions,PEP 600
PEP 610,Recording the Direct URL Origin of installed distributions,PEP 610
PEP 592,Adding “Yank” Support to the Simple API,PEP 592
PEP 587,Python Initialization Configuration,PEP 587
PEP 597,Add optional EncodingWarning,PEP 597
PEP 585,Type Hinting Generics In Standard Collections,PEP 585
PEP 574,Pickle protocol 5 with out-of-band data,PEP 574
PEP 584,Add Union Operators To dict,PEP 584
PEP 573,Module State Access from C Extension Methods,PEP 573
PEP 572,Assignment Expressions,PEP 572
PEP 570,Python Positional-Only Parameters,PEP 570
PEP 567,Context Variables,PEP 567
PEP 565,Show DeprecationWarning in __main__,PEP 565
PEP 561,Distributing and Packaging Type Information,PEP 561
PEP 566,Metadata for Python Software Packages 2.1,PEP 566
PEP 564,Add new time functions with nanosecond resolution,PEP 564
PEP 562,Module __getattr__ and __dir__,PEP 562
PEP 553,Built-in breakpoint(),PEP 553
PEP 552,Deterministic pycs,PEP 552
PEP 540,Add a new UTF-8 Mode,PEP 540
PEP 539,A New C-API for Thread-Local Storage in CPython,PEP 539
PEP 557,Data Classes,PEP 557
PEP 530,Asynchronous Comprehensions,PEP 530
PEP 538,Coercing the legacy C locale to a UTF-8 based locale,PEP 538
PEP 529,Change Windows filesystem encoding to UTF-8,PEP 529
PEP 526,Syntax for Variable Annotations,PEP 526
PEP 524,Make os.urandom() blocking on Linux,PEP 524
PEP 525,Asynchronous Generators,PEP 525
PEP 528,Change Windows console encoding to UTF-8,PEP 528
PEP 519,Adding a file system path protocol,PEP 519
PEP 517,A build-system independent format for source trees,PEP 517
PEP 518,Specifying Minimum Build System Requirements for Python Projects,PEP 518
PEP 515,Underscores in Numeric Literals,PEP 515
PEP 523,Adding a frame evaluation API to CPython,PEP 523
PEP 520,Preserving Class Attribute Definition Order,PEP 520
PEP 508,Dependency specification for Python Software Packages,PEP 508
PEP 506,Adding A Secrets Module To The Standard Library,PEP 506
PEP 498,Literal String Interpolation,PEP 498
PEP 503,Simple Repository API,PEP 503
PEP 495,Local Time Disambiguation,PEP 495
PEP 493,HTTPS verification migration tools for Python 2.7,PEP 493
PEP 492,Coroutines with async and await syntax,PEP 492
PEP 488,Elimination of PYO files,PEP 488
PEP 485,A Function for testing approximate equality,PEP 485
PEP 486,Make the Python Launcher aware of virtual environments,PEP 486
PEP 489,Multi-phase extension module initialization,PEP 489
PEP 484,Type Hints,PEP 484
PEP 479,Change StopIteration handling inside generators,PEP 479
PEP 487,Simpler customisation of class creation,PEP 487
PEP 476,Enabling certificate verification by default for stdlib http clients,PEP 476
PEP 471,os.scandir() function,PEP 471
PEP 468,Preserving the order of **kwargs in a function.,PEP 468
PEP 475,Retry system calls failing with EINTR,PEP 475
PEP 466,Network Security Enhancements for Python 2.7.x,PEP 466
PEP 477,Backport ensurepip (PEP 453) to Python 2.7,PEP 477
PEP 456,Secure and interchangeable hash algorithm,PEP 456
PEP 461,Adding % formatting to bytes and bytearray,PEP 461
PEP 465,A dedicated infix operator for matrix multiplication,PEP 465
PEP 451,A ModuleSpec Type for the Import System,PEP 451
PEP 454,Add a new tracemalloc module to trace Python memory allocations,PEP 454
PEP 448,Additional Unpacking Generalizations,PEP 448
PEP 450,Adding A Statistics Module To The Standard Library,PEP 450
PEP 453,Explicit bootstrapping of pip in Python installations,PEP 453
PEP 446,Make newly created file descriptors non-inheritable,PEP 446
PEP 442,Safe object finalization,PEP 442
PEP 445,Add new APIs to customize Python memory allocators,PEP 445
PEP 443,Single-dispatch generic functions,PEP 443
PEP 436,The Argument Clinic DSL,PEP 436
PEP 441,Improving Python ZIP Application Support,PEP 441
PEP 440,Version Identification and Dependency Specification,PEP 440
PEP 435,Adding an Enum type to the Python standard library,PEP 435
PEP 428,The pathlib module,PEP 428
PEP 424,A method for exposing a length hint,PEP 424
PEP 427,The Wheel Binary Package Format 1.0,PEP 427
PEP 420,Implicit Namespace Packages,PEP 420
PEP 417,Including mock in the Standard Library,PEP 417
PEP 421,Adding sys.implementation,PEP 421
PEP 418,"Add monotonic time, performance counter, and process time functions",PEP 418
PEP 425,Compatibility Tags for Built Distributions,PEP 425
PEP 414,Explicit Unicode Literal for Python 3.3,PEP 414
PEP 409,Suppressing exception context,PEP 409
PEP 415,Implement context suppression with exception attributes,PEP 415
PEP 412,Key-Sharing Dictionary,PEP 412
PEP 405,Python Virtual Environments,PEP 405
PEP 397,Python launcher for Windows,PEP 397
PEP 393,Flexible String Representation,PEP 393
PEP 391,Dictionary-Based Configuration For Logging,PEP 391
PEP 389,argparse - New Command Line Parsing Module,PEP 389
PEP 384,Defining a Stable ABI,PEP 384
PEP 383,Non-decodable Bytes in System Character Interfaces,PEP 383
PEP 380,Syntax for Delegating to a Subgenerator,PEP 380
PEP 376,Database of Installed Python Distributions,PEP 376
PEP 378,Format Specifier for Thousands Separator,PEP 378
PEP 371,Addition of the multiprocessing package to the standard library,PEP 371
PEP 372,Adding an ordered dictionary to collections,PEP 372
PEP 362,Function Signature Object,PEP 362
PEP 370,Per user site-packages directory,PEP 370
PEP 358,The “bytes” Object,PEP 358
PEP 366,Main module explicit relative imports,PEP 366
PEP 357,Allowing Any Object to be Used for Slicing,PEP 357
PEP 353,Using ssize_t as the index type,PEP 353
PEP 352,Required Superclass for Exceptions,PEP 352
PEP 343,The “with” Statement,PEP 343
PEP 341,Unifying try-except and try-finally,PEP 341
PEP 342,Coroutines via Enhanced Generators,PEP 342
PEP 338,Executing modules as scripts,PEP 338
PEP 331,Locale-Independent Float/String Conversions,PEP 331
PEP 328,Imports: Multi-Line and Absolute/Relative,PEP 328
PEP 324,subprocess - New process module,PEP 324
PEP 322,Reverse Iteration,PEP 322
PEP 327,Decimal Data Type,PEP 327
PEP 318,Decorators for Functions and Methods,PEP 318
PEP 311,Simplified Global Interpreter Lock Acquisition for Extensions,PEP 311
PEP 309,Partial Function Application,PEP 309
PEP 308,Conditional Expressions,PEP 308
PEP 307,Extensions to the pickle protocol,PEP 307
PEP 302,New Import Hooks,PEP 302
PEP 305,CSV File API,PEP 305
PEP 301,Package Index and Metadata for Distutils,PEP 301
PEP 293,Codec Error Handling Callbacks,PEP 293
PEP 292,Simpler String Substitutions,PEP 292
PEP 282,A Logging System,PEP 282
PEP 285,Adding a bool type,PEP 285
PEP 289,Generator Expressions,PEP 289
PEP 279,The enumerate() built-in function,PEP 279
PEP 273,Import Modules from Zip Archives,PEP 273
PEP 274,Dict Comprehensions,PEP 274
PEP 278,Universal Newline Support,PEP 278
PEP 277,Unicode file name support for Windows NT,PEP 277
PEP 264,Future statements in simulated shells,PEP 264
PEP 263,Defining Python Source Code Encodings,PEP 263
PEP 261,Support for “wide” Unicode characters,PEP 261
PEP 255,Simple Generators,PEP 255
PEP 260,Simplify xrange(),PEP 260
PEP 253,Subtyping Built-in Types,PEP 253
PEP 237,Unifying Long Integers and Integers,PEP 237
PEP 238,Changing the Division Operator,PEP 238
PEP 250,Using site-packages on Windows,PEP 250
PEP 236,Back to the __future__,PEP 236
PEP 252,Making Types Look More Like Classes,PEP 252
PEP 235,Import on Case-Insensitive Platforms,PEP 235
PEP 232,Function Attributes,PEP 232
PEP 229,Using Distutils to Build Python,PEP 229
PEP 227,Statically Nested Scopes,PEP 227
PEP 230,Warning Framework,PEP 230
PEP 234,Iterators,PEP 234
PEP 223,Change the Meaning of,PEP 223
PEP 218,Adding a Built-In Set Object Type,PEP 218
PEP 221,Import As,PEP 221
PEP 214,Extended Print Statement,PEP 214
PEP 207,Rich Comparisons,PEP 207
PEP 217,Display Hook for Interactive Use,PEP 217
PEP 208,Reworking the Coercion Model,PEP 208
PEP 205,Weak References,PEP 205
PEP 202,List Comprehensions,PEP 202
PEP 201,Lockstep Iteration,PEP 201
PEP 203,Augmented Assignments,PEP 203
PEP 100,Python Unicode Integration,PEP 100
PEP 702,Marking deprecations using the type system,PEP 702
PEP 698,Override Decorator for Static Typing,PEP 698
PEP 701,Syntactic formalization of f-strings,PEP 701
PEP 703,Making the Global Interpreter Lock Optional in CPython,PEP 703
PEP 704,Require virtual environments by default for package installers,PEP 704
PEP 697,Limited C API for Extending Opaque Types,PEP 697
PEP 695,Type Parameter Syntax,PEP 695
PEP 696,Type defaults for TypeVarLikes,PEP 696
PEP 688,Making the buffer protocol accessible in Python,PEP 688
PEP 679,Allow parentheses in assert statements,PEP 679
PEP 692,Using TypedDict for more precise **kwargs typing,PEP 692
PEP 684,A Per-Interpreter GIL,PEP 684
PEP 694,Upload 2.0 API for Python Package Repositories,PEP 694
PEP 671,Syntax for late-bound function argument defaults,PEP 671
PEP 659,Specializing Adaptive Interpreter,PEP 659
PEP 661,Sentinel Values,PEP 661
PEP 669,Low Impact Monitoring for CPython,PEP 669
PEP 667,Consistent views of namespaces,PEP 667
PEP 649,Deferred Evaluation Of Annotations Using Descriptors,PEP 649
PEP 653,Precise Semantics for Pattern Matching,PEP 653
PEP 639,Improving License Clarity with Better Package Metadata,PEP 639
PEP 638,Syntactic Macros,PEP 638
PEP 603,Adding a frozenmap type to collections,PEP 603
PEP 588,GitHub Issues Migration Plan,PEP 588
PEP 582,Python local packages directory,PEP 582
PEP 558,Defined semantics for locals(),PEP 558
PEP 554,Multiple Interpreters in the Stdlib,PEP 554
PEP 480,Surviving a Compromise of PyPI: End-to-end signing of packages,PEP 480
PEP 467,Minor API improvements for binary sequences,PEP 467
PEP 3121,Extension Module Initialization and Finalization,PEP 3121
PEP 700,Additional Fields for the Simple API for Package Indexes,PEP 700
PEP 699,Remove private dict version field added in PEP 509,PEP 699
PEP 691,JSON-based Simple API for Python Package Indexes,PEP 691
PEP 689,Unstable C API tier,PEP 689
PEP 687,Isolating modules in the standard library,PEP 687
PEP 686,Make UTF-8 mode default,PEP 686
PEP 683,"Immortal Objects, Using a Fixed Refcount",PEP 683
PEP 685,Comparison of extra names for optional distribution dependencies,PEP 685
PEP 681,Data Class Transforms,PEP 681
PEP 680,tomllib: Support for Parsing TOML in the Standard Library,PEP 680
PEP 678,Enriching Exceptions with Notes,PEP 678
PEP 673,Self Type,PEP 673
PEP 668,Marking Python base environments as “externally managed”,PEP 668
PEP 675,Arbitrary Literal String Type,PEP 675
PEP 658,Serve Distribution Metadata in the Simple Repository API,PEP 658
PEP 655,Marking individual TypedDict items as required or potentially-missing,PEP 655
PEP 647,User-Defined Type Guards,PEP 647
PEP 654,Exception Groups and except*,PEP 654
PEP 646,Variadic Generics,PEP 646
PEP 632,Deprecate distutils module,PEP 632
PEP 634,Structural Pattern Matching: Specification,PEP 634
PEP 625,Filename of a Source Distribution,PEP 625
PEP 613,Explicit Type Aliases,PEP 613
PEP 617,New PEG parser for CPython,PEP 617
PEP 615,Support for the IANA Time Zone Database in the Standard Library,PEP 615
PEP 604,Allow writing union types as,PEP 604
PEP 612,Parameter Specification Variables,PEP 612
PEP 590,Vectorcall: a fast calling protocol for CPython,PEP 590
PEP 589,TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys,PEP 589
PEP 591,Adding a final qualifier to typing,PEP 591
PEP 593,Flexible function and variable annotations,PEP 593
PEP 594,Removing dead batteries from the standard library,PEP 594
PEP 578,Python Runtime Audit Hooks,PEP 578
PEP 560,Core support for typing module and generic types,PEP 560
PEP 586,Literal Types,PEP 586
PEP 563,Postponed Evaluation of Annotations,PEP 563
PEP 544,Protocols: Structural subtyping (static duck typing),PEP 544
PEP 458,Secure PyPI downloads with signed repository metadata,PEP 458
PEP 8103,2022 Term steering council election,PEP 8103
PEP 8104,2023 Term Steering Council election,PEP 8104
PEP 8102,2021 Term steering council election,PEP 8102
PEP 8100,January 2019 steering council election,PEP 8100
PEP 8101,2020 Term steering council election,PEP 8101
PEP 8016,The Steering Council Model,PEP 8016
PEP 693,Python 3.12 Release Schedule,PEP 693
PEP 8002,Open Source Governance Survey,PEP 8002
PEP 3333,Python Web Server Gateway Interface v1.0.1,PEP 3333
PEP 8000,Python Language Governance Proposal Overview,PEP 8000
PEP 801,Reserved,PEP 801
PEP 635,Structural Pattern Matching: Motivation and Rationale,PEP 635
PEP 664,Python 3.11 Release Schedule,PEP 664
PEP 672,Unicode-related Security Considerations for Python,PEP 672
PEP 636,Structural Pattern Matching: Tutorial,PEP 636
PEP 630,Isolating Extension Modules,PEP 630
PEP 602,Annual Release Cycle for Python,PEP 602
PEP 607,Reducing CPython’s Feature Delivery Latency,PEP 607
PEP 619,Python 3.10 Release Schedule,PEP 619
PEP 596,Python 3.9 Release Schedule,PEP 596
PEP 569,Python 3.8 Release Schedule,PEP 569
PEP 579,Refactoring C functions and methods,PEP 579
PEP 514,Python registration in the Windows registry,PEP 514
PEP 537,Python 3.7 Release Schedule,PEP 537
PEP 457,Notation For Positional-Only Parameters,PEP 457
PEP 483,The Theory of Type Hints,PEP 483
PEP 482,Literature Overview for Type Hints,PEP 482
PEP 434,IDLE Enhancement Exception for All Branches,PEP 434
PEP 452,API for Cryptographic Hash Functions v2.0,PEP 452
PEP 399,Pure Python/C Accelerator Module Compatibility Requirements,PEP 399
PEP 404,Python 2.8 Un-release Schedule,PEP 404
PEP 394,The “python” Command on Unix-Like Systems,PEP 394
PEP 430,Migrating to Python 3 as the default online documentation,PEP 430
PEP 291,Backward Compatibility for the Python 2 Standard Library,PEP 291
PEP 257,Docstring Conventions,PEP 257
PEP 333,Python Web Server Gateway Interface v1.0,PEP 333
PEP 290,Code Migration and Modernization,PEP 290
PEP 249,Python Database API Specification v2.0,PEP 249
PEP 248,Python Database API Specification v1.0,PEP 248
PEP 272,API for Block Encryption Algorithms v1.0,PEP 272
PEP 287,reStructuredText Docstring Format,PEP 287
PEP 2,Procedure for Adding New Modules,PEP 2
PEP 4,Deprecation of Standard Modules,PEP 4
